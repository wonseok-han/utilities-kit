import { fetchCVEById, fetchRecentCVEs } from '@services/cve';
import { create } from 'zustand';

interface CVEState {
  cves: CVEDataType[];
  isLoading: boolean;
  error: string | null;
  lastUpdated: string | null;
  fetchRecentCVEs: () => Promise<void>;
  fetchCVEById: (id: string) => Promise<CVEDataType | null>;
  clearError: () => void;
}

export const useCVEStore = create<CVEState>((set, _get) => ({
  cves: [],
  isLoading: false,
  error: null,
  lastUpdated: null,

  fetchRecentCVEs: async () => {
    set({ isLoading: true, error: null });

    try {
      const cves = await fetchRecentCVEs();
      set({
        cves,
        isLoading: false,
        lastUpdated: new Date().toISOString(),
      });
    } catch (error) {
      set({
        error:
          error instanceof Error ? error.message : 'Failed to fetch CVE data',
        isLoading: false,
      });
    }
  },

  fetchCVEById: async (id: string) => {
    set({ isLoading: true, error: null });

    try {
      const cve = await fetchCVEById(id);
      set({ isLoading: false });
      return cve;
    } catch (error) {
      set({
        error:
          error instanceof Error ? error.message : 'Failed to fetch CVE data',
        isLoading: false,
      });
      return null;
    }
  },

  clearError: () => set({ error: null }),
}));
