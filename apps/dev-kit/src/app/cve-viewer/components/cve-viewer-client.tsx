'use client';

import { ActionButton } from '@repo/ui';
import { useCVEStore } from '@store/cve-store';
import React, { useEffect } from 'react';

import { CVECard } from './cve-card';
import CVECardSkeleton from './cve-card-skeleton';

interface CVEViewerClientProps {
  initialCVEs: CVEDataType[];
}

/**
 * CVE Viewer 클라이언트 컴포넌트 - 데이터가 필요한 부분만 담당
 *
 * 서버에서 전달받은 초기 데이터를 스토어에 설정하고,
 * 사용자 상호작용(새로고침, 에러 처리)을 처리합니다.
 *
 * @param props
 * @param props.initialCVEs - 서버에서 가져온 초기 CVE 데이터
 */
export function CVEViewerClient({ initialCVEs }: CVEViewerClientProps) {
  const {
    clearError,
    cves,
    error,
    fetchRecentCVEs,
    isLoading,
    lastUpdated,
    setInitialData,
  } = useCVEStore();

  // ===== 초기 데이터 설정 =====
  useEffect(() => {
    if (initialCVEs.length > 0) {
      // 서버에서 가져온 데이터가 있으면 스토어에 설정
      setInitialData(initialCVEs, null);
    } else {
      // 초기 데이터가 없으면 새로 가져오기
      fetchRecentCVEs();
    }
  }, [initialCVEs, setInitialData, fetchRecentCVEs]);

  // ===== 이벤트 핸들러 =====
  const handleRefresh = () => {
    clearError();
    fetchRecentCVEs();
  };

  return (
    <>
      {/* ===== 상호작용이 필요한 부분 ===== */}
      <div className="flex items-center gap-4 mb-4">
        <ActionButton
          feedbackText={isLoading ? '로딩 중...' : '새로고침'}
          onClick={handleRefresh}
          variant="primary"
        >
          새로고침
        </ActionButton>

        {lastUpdated && (
          <span className="text-sm text-gray-400">
            마지막 업데이트: {new Date(lastUpdated).toLocaleString('ko-KR')}
          </span>
        )}
      </div>

      {/* ===== 에러 처리 ===== */}
      {error && (
        <div className="mb-4 p-4 bg-red-900/20 border border-red-700 rounded-lg">
          <p className="text-red-400">오류: {error}</p>
        </div>
      )}

      {/* ===== CVE 데이터 목록 ===== */}
      <div className="flex-1 overflow-auto">
        {isLoading && cves.length === 0 ? (
          // 로딩 중이고 데이터가 없을 때 스켈레톤 표시
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {Array.from({ length: 6 }, (_, i) => (
              <CVECardSkeleton key={`skeleton-${i}`} />
            ))}
          </div>
        ) : cves.length > 0 ? (
          // 데이터가 있을 때 CVE 카드 목록 표시
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {cves.map((cve) => (
              <CVECard key={cve.id} cve={cve} />
            ))}
          </div>
        ) : (
          // 데이터가 없을 때 빈 상태 메시지 표시
          <div className="text-center py-12">
            <p className="text-gray-400">표시할 CVE 데이터가 없습니다.</p>
          </div>
        )}
      </div>
    </>
  );
}
