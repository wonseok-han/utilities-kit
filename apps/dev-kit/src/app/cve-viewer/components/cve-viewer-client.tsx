'use client';

import { useInfiniteScroll } from '@hooks';
import { ActionButton, useSnackbar } from '@repo/ui';
import { useCVEStore } from '@store';
import React, { useEffect } from 'react';

import { CVECard, CVECardSkeleton } from './index';

interface CVEViewerClientProps {
  initialCVEs: CVEDataType[];
  metadata: PaginationType;
}

/**
 * CVE Viewer 클라이언트 컴포넌트 - 데이터가 필요한 부분만 담당
 *
 * 서버에서 전달받은 초기 데이터를 스토어에 설정하고,
 * 사용자 상호작용(새로고침, 에러 처리)을 처리합니다.
 * 무한스크롤을 통해 더 많은 CVE 데이터를 로드합니다.
 *
 * @param props
 * @param props.initialCVEs - 서버에서 가져온 초기 CVE 데이터
 */
export function CVEViewerClient({
  initialCVEs,
  metadata,
}: CVEViewerClientProps) {
  const {
    clearError,
    cves,
    error,
    fetchRecentCVEs,
    hasMore,
    isLoading,
    isLoadingMore,
    lastUpdated,
    loadMoreCVEs,
    resetPagination,
    setInitialData,
  } = useCVEStore();

  // ===== 초기 데이터 설정 =====
  useEffect(() => {
    // 초기 메타데이터를 기반으로 최신순 데이터 조회
    if (metadata) {
      handleRefresh();
    } else if (initialCVEs.length > 0) {
      // 서버에서 가져온 데이터가 있으면 스토어에 설정
      setInitialData(initialCVEs, null);
    }
  }, [initialCVEs, metadata, setInitialData, fetchRecentCVEs]);

  // ===== 무한스크롤 설정 =====
  const loadingRef = useInfiniteScroll({
    hasMore,
    isLoading: isLoadingMore,
    onLoadMore: loadMoreCVEs,
    threshold: 200,
  });

  // ===== 무한스크롤 디버깅 =====
  useEffect(() => {
    console.log('🔍 CVE Viewer mounted:', {
      hasMore,
      isLoadingMore,
      cvesLength: cves.length,
    });
  }, [hasMore, isLoadingMore, cves.length]);

  // ===== 스낵바 훅 사용 =====
  const { showSnackbar } = useSnackbar();

  // ===== 에러 처리 =====
  useEffect(() => {
    if (error) {
      showSnackbar({
        message: 'NVD 데이터를 조회하는데 실패했습니다. 다시 시도해주세요.',
        type: 'error',
        position: 'bottom-right',
        autoHideDuration: 6000,
      });
    }
  }, [error, showSnackbar]);

  // ===== 이벤트 핸들러 =====
  const handleRefresh = () => {
    clearError();
    resetPagination();

    console.log('🔍 metadata', metadata);

    // 역순 페이지네이션: 총 페이지 수 계산
    const totalPages = Math.ceil((metadata.totalResults || 1) / 50);
    fetchRecentCVEs({ page: totalPages });
  };

  return (
    <>
      {/* ===== 상호작용이 필요한 부분 ===== */}
      <div className="flex flex-col items-start gap-2 mb-4 md:!flex-row md:!items-end md:!gap-4">
        <ActionButton
          feedbackText={isLoading ? '로딩 중...' : '새로고침'}
          onClick={handleRefresh}
          variant="primary"
        >
          새로고침
        </ActionButton>

        {lastUpdated && (
          <span className="text-sm text-gray-400">
            마지막 업데이트: {new Date(lastUpdated).toLocaleString('ko-KR')}
          </span>
        )}
      </div>

      {/* ===== CVE 데이터 목록 ===== */}
      {isLoading && cves.length === 0 ? (
        // 초기 로딩 중이고 데이터가 없을 때 스켈레톤 표시
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {Array.from({ length: 6 }, (_, i) => (
            <CVECardSkeleton key={`skeleton-${i}`} />
          ))}
        </div>
      ) : cves.length > 0 ? (
        // 데이터가 있을 때 CVE 카드 목록 표시
        <>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {cves.map((cve) => (
              <CVECard
                key={`${cve.id}-${cve.publishedDate}-${cve.lastModifiedDate || Date.now()}`}
                cve={cve}
              />
            ))}
          </div>

          {/* ===== 무한스크롤 로딩 영역 ===== */}
          <div className="mt-6 flex justify-center py-8" ref={loadingRef}>
            {hasMore ? (
              isLoadingMore ? (
                <div className="flex items-center gap-2 text-gray-400">
                  <div className="w-4 h-4 border-2 border-gray-600 border-t-blue-400 rounded-full animate-spin" />
                  <span>더 많은 CVE 로딩 중...</span>
                </div>
              ) : (
                <div className="h-8" />
              )
            ) : (
              <div className="text-center text-gray-400 py-4">
                모든 CVE 데이터를 불러왔습니다.
              </div>
            )}
          </div>
        </>
      ) : (
        // 데이터가 없을 때 빈 상태 메시지 표시
        <div className="text-center py-12">
          <p className="text-gray-400">표시할 CVE 데이터가 없습니다.</p>
        </div>
      )}
    </>
  );
}
